// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ecommerce.Data;

namespace ecommerce.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("ecommerce.Data.ProductDetails", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT");

                    b.Property<string>("Backlight")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaterryCells")
                        .HasColumnType("TEXT");

                    b.Property<string>("BatterySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bluetooth")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderSupport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipsetType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpu")
                        .HasColumnType("TEXT");

                    b.Property<string>("CpuSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplaySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayTech")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Features")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl1")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl2")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl3")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mainboard")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumCores")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sound")
                        .HasColumnType("TEXT");

                    b.Property<string>("Webcam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessController")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessProtocol")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductDetailId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("ecommerce.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fullname")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHashed")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip5")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address1 = "8200 broadway st",
                            Address2 = "apt 711n",
                            City = "houston",
                            DateCreated = new DateTime(2020, 4, 4, 1, 42, 5, 648, DateTimeKind.Local).AddTicks(9196),
                            Email = "wolnguyen98@gmail.com",
                            Fullname = "thuy nguyen",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "Fz8BNWOnp8zRlT9MIGhY6emoNMyDcjvvHDGI/9F8IKM=",
                            PasswordSalt = new byte[] { 252, 58, 72, 209, 206, 69, 2, 219, 185, 6, 208, 8, 156, 105, 56, 196 },
                            State = "tx",
                            Zip4 = "",
                            Zip5 = ""
                        },
                        new
                        {
                            CustomerId = 2,
                            Address1 = "8956 Sage St",
                            Address2 = "",
                            City = "Benton Harbor",
                            DateCreated = new DateTime(2020, 4, 4, 1, 42, 5, 652, DateTimeKind.Local).AddTicks(9702),
                            Email = "cmphan7@gmail.com",
                            Fullname = "cuong phan",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "Fz8BNWOnp8zRlT9MIGhY6emoNMyDcjvvHDGI/9F8IKM=",
                            PasswordSalt = new byte[] { 252, 58, 72, 209, 206, 69, 2, 219, 185, 6, 208, 8, 156, 105, 56, 196 },
                            State = "MI",
                            Zip4 = "",
                            Zip5 = "49022"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address1 = "457 Illinois Road",
                            Address2 = "",
                            City = "Monsey",
                            DateCreated = new DateTime(2020, 4, 4, 1, 42, 5, 653, DateTimeKind.Local).AddTicks(452),
                            Email = "kimnguyen137@gmail.com",
                            Fullname = "kim nguyen",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "Fz8BNWOnp8zRlT9MIGhY6emoNMyDcjvvHDGI/9F8IKM=",
                            PasswordSalt = new byte[] { 252, 58, 72, 209, 206, 69, 2, 219, 185, 6, 208, 8, 156, 105, 56, 196 },
                            State = "ny",
                            Zip4 = "",
                            Zip5 = "10952"
                        });
                });

            modelBuilder.Entity("ecommerce.Model.CustomerShippingAddresses", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip5")
                        .HasColumnType("TEXT");

                    b.HasKey("ShippingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerShippingAddresses");

                    b.HasData(
                        new
                        {
                            ShippingId = 1,
                            Address1 = "8220 broadway",
                            Address2 = "apt 711n",
                            City = "houston",
                            CustomerId = 1,
                            Name = "thuy nguyen",
                            State = "tx",
                            Zip4 = "1233",
                            Zip5 = "77061"
                        },
                        new
                        {
                            ShippingId = 2,
                            Address1 = "8220 broadway",
                            Address2 = "apt 709n",
                            City = "houston",
                            CustomerId = 1,
                            Name = "chau nguyen",
                            State = "tx",
                            Zip4 = "1233",
                            Zip5 = "77061"
                        },
                        new
                        {
                            ShippingId = 3,
                            Address1 = "921 Trucklemans Lane",
                            Address2 = "",
                            City = "Brookfield",
                            CustomerId = 2,
                            Name = "cuong nguyen",
                            State = "ca",
                            Zip4 = "",
                            Zip5 = "665501"
                        },
                        new
                        {
                            ShippingId = 4,
                            Address1 = "8956 Sage St",
                            Address2 = "",
                            City = "Benton Harbor",
                            CustomerId = 2,
                            Name = "cuong phan",
                            State = "MI ",
                            Zip4 = "",
                            Zip5 = "49022"
                        },
                        new
                        {
                            ShippingId = 5,
                            Address1 = "339 East Thompson Court",
                            Address2 = "",
                            City = "Beaver Falls",
                            CustomerId = 3,
                            Name = "kim phan",
                            State = "PA ",
                            Zip4 = "",
                            Zip5 = "15010"
                        },
                        new
                        {
                            ShippingId = 6,
                            Address1 = "457 Illinois Road",
                            Address2 = "218 Village Road",
                            City = "Brookfield",
                            CustomerId = 3,
                            Name = "kim nguyen",
                            State = "ca",
                            Zip4 = "",
                            Zip5 = "665501"
                        });
                });

            modelBuilder.Entity("ecommerce.Model.OrderDetails", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetailProductQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetailId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ecommerce.Model.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipAddress1")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipAddress2")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipState")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipZip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipZip5")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ecommerce.Model.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderDetailsDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("REAL");

                    b.Property<int?>("productDetailsProductDetailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderDetailsDetailId");

                    b.HasIndex("productDetailsProductDetailId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ecommerce.Model.CustomerShippingAddresses", b =>
                {
                    b.HasOne("ecommerce.Model.Customer", "Customer")
                        .WithMany("CustomerShippingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Model.OrderDetails", b =>
                {
                    b.HasOne("ecommerce.Model.Orders", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrdersOrderId");
                });

            modelBuilder.Entity("ecommerce.Model.Orders", b =>
                {
                    b.HasOne("ecommerce.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Model.Products", b =>
                {
                    b.HasOne("ecommerce.Model.OrderDetails", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderDetailsDetailId");

                    b.HasOne("ecommerce.Data.ProductDetails", "productDetails")
                        .WithMany()
                        .HasForeignKey("productDetailsProductDetailId");
                });
#pragma warning restore 612, 618
        }
    }
}
