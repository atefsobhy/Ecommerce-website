// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ecommerce.Data;

namespace ecommerce.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("ecommerce.Data.ProductDetails", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioCodec")
                        .HasColumnType("TEXT");

                    b.Property<string>("Backlight")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaterryCells")
                        .HasColumnType("TEXT");

                    b.Property<string>("BatterySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bluetooth")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("CacheType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderSupport")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardReaderType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipsetType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpu")
                        .HasColumnType("TEXT");

                    b.Property<string>("CpuSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplaySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayTech")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Features")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphicSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDriveType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl1")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl2")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl3")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mainboard")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumCores")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("RamType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sound")
                        .HasColumnType("TEXT");

                    b.Property<string>("Webcam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessController")
                        .HasColumnType("TEXT");

                    b.Property<string>("WirelessProtocol")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductDetailId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("ecommerce.Model.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ProductsProductId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ecommerce.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fullname")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHashed")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip5")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address1 = "8200 broadway st",
                            Address2 = "apt 711n",
                            City = "houston",
                            DateCreated = new DateTime(2020, 4, 14, 16, 9, 41, 876, DateTimeKind.Local).AddTicks(4813),
                            Email = "wolnguyen98@gmail.com",
                            Fullname = "thuy nguyen",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "YHytfxH70coLAEqqeZg1L4R6QopnbzxC7HPTdE+4geY=",
                            PasswordSalt = new byte[] { 84, 255, 180, 182, 9, 41, 217, 241, 139, 134, 249, 192, 198, 148, 111, 167 },
                            State = "tx",
                            Zip4 = "",
                            Zip5 = ""
                        },
                        new
                        {
                            CustomerId = 2,
                            Address1 = "8956 Sage St",
                            Address2 = "",
                            City = "Benton Harbor",
                            DateCreated = new DateTime(2020, 4, 14, 16, 9, 41, 879, DateTimeKind.Local).AddTicks(4461),
                            Email = "cmphan7@gmail.com",
                            Fullname = "cuong phan",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "YHytfxH70coLAEqqeZg1L4R6QopnbzxC7HPTdE+4geY=",
                            PasswordSalt = new byte[] { 84, 255, 180, 182, 9, 41, 217, 241, 139, 134, 249, 192, 198, 148, 111, 167 },
                            State = "MI",
                            Zip4 = "",
                            Zip5 = "49022"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address1 = "457 Illinois Road",
                            Address2 = "",
                            City = "Monsey",
                            DateCreated = new DateTime(2020, 4, 14, 16, 9, 41, 879, DateTimeKind.Local).AddTicks(4505),
                            Email = "kimnguyen137@gmail.com",
                            Fullname = "kim nguyen",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHashed = "YHytfxH70coLAEqqeZg1L4R6QopnbzxC7HPTdE+4geY=",
                            PasswordSalt = new byte[] { 84, 255, 180, 182, 9, 41, 217, 241, 139, 134, 249, 192, 198, 148, 111, 167 },
                            State = "ny",
                            Zip4 = "",
                            Zip5 = "10952"
                        });
                });

            modelBuilder.Entity("ecommerce.Model.CustomerShippingAddresses", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip5")
                        .HasColumnType("TEXT");

                    b.HasKey("ShippingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerShippingAddresses");

                    b.HasData(
                        new
                        {
                            ShippingId = 1,
                            Address1 = "8220 broadway",
                            Address2 = "apt 711n",
                            City = "houston",
                            CustomerId = 1,
                            Name = "thuy nguyen",
                            State = "tx",
                            Zip4 = "1233",
                            Zip5 = "77061"
                        },
                        new
                        {
                            ShippingId = 2,
                            Address1 = "8220 broadway",
                            Address2 = "apt 709n",
                            City = "houston",
                            CustomerId = 1,
                            Name = "chau nguyen",
                            State = "tx",
                            Zip4 = "1233",
                            Zip5 = "77061"
                        },
                        new
                        {
                            ShippingId = 3,
                            Address1 = "921 Trucklemans Lane",
                            Address2 = "",
                            City = "Brookfield",
                            CustomerId = 2,
                            Name = "cuong nguyen",
                            State = "ca",
                            Zip4 = "",
                            Zip5 = "665501"
                        },
                        new
                        {
                            ShippingId = 4,
                            Address1 = "8956 Sage St",
                            Address2 = "",
                            City = "Benton Harbor",
                            CustomerId = 2,
                            Name = "cuong phan",
                            State = "MI ",
                            Zip4 = "",
                            Zip5 = "49022"
                        },
                        new
                        {
                            ShippingId = 5,
                            Address1 = "339 East Thompson Court",
                            Address2 = "",
                            City = "Beaver Falls",
                            CustomerId = 3,
                            Name = "kim phan",
                            State = "PA ",
                            Zip4 = "",
                            Zip5 = "15010"
                        },
                        new
                        {
                            ShippingId = 6,
                            Address1 = "457 Illinois Road",
                            Address2 = "218 Village Road",
                            City = "Brookfield",
                            CustomerId = 3,
                            Name = "kim nguyen",
                            State = "ca",
                            Zip4 = "",
                            Zip5 = "665501"
                        });
                });

            modelBuilder.Entity("ecommerce.Model.OrderDetails", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetailProductQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetailId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ecommerce.Model.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipAddress1")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipAddress2")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipState")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipZip4")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderShipZip5")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ecommerce.Model.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderDetailsDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("REAL");

                    b.Property<int?>("productDetailsProductDetailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderDetailsDetailId");

                    b.HasIndex("productDetailsProductDetailId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://i.dell.com/sites/csimages/Video_Imagery/all/xps_7590_touch.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "Dell XPS 15",
                            ProductPrice = 1399.0
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDetailId = 1,
                            ProductImageUrl = "http://pngimg.com/uploads/macbook/macbook_PNG76.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "Macbook Pro 2020",
                            ProductPrice = 1999.0
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/b8528a5e30d72245cdbbb8c45918877e/L0KzQYm4UcE3N6RnipH0aYP2gLBuTfhxNaR1fdV9cnWwiIS9TcE0NZJqReVucnnog37wjwRmdF5ohARuLXm6Pb3okQQucKEyiAJuY4T1dX7BU8YuOWQyedcALUP3hX7qiPVkc55mjNc2Y3BwgMa0VfJmbZI5S6NtZUW7QIi1UMk1PWM8UaY6NUS1Q4e9UsU4QWI1T5D5bne=/kisspng-hp-spectre-x36-13-ae-series-intel-core-i7-lapt-hp-spectre-x36-13-ae5-3tu-checkmate-compu-5beea431de5807.0945279415423662579107.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "HP Spectre X360 15",
                            ProductPrice = 1849.0
                        },
                        new
                        {
                            ProductId = 4,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/374245de3c2eea1a275400c98ec203f4/L0KzQYq3UcI2N5x1R91yc4Pzfri0ggN2e153h9k2c4T1ecm0kBNiel5ugZ9wbEWwRH7zggB1d6EyeeVAcz31f7i0hBFucZ8yTdU9YnHpc4WBhfM3amMzSqs9M0O5RoS4VcQ5PGc5SKgDNUi3SHB3jvc=/kisspng-asus-rog-strix-scar-ii-gl5-4-laptop-asus-rog-gamin-5c4bafc48ec6b2.2943366315484640685848.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "ASUS GL702 Gamming",
                            ProductPrice = 1499.0
                        },
                        new
                        {
                            ProductId = 5,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/e6616b48999baa49bc3dd3655cb77303/L0KzQYm3VsE4N6pmi5H0aYP2gLBuTfxieKV0iJ9qc4X2PcP2h710fKNukJ9wbEW4Q37wjwRmdF5ohARuLXm6Pbr6iP9xeJpzfAJ0LUXlQofrWMQ5Omk5SacBLkK0QoK7WcAzOWY3UaQCMkO8QoK9VMkveJ9s/kisspng-laptop-asus-rog-strix-gl553-intel-core-i7-ishoppingpk-5b26d848284156.2121490215292723921649.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "HP Gaming Pavilion",
                            ProductPrice = 999.0
                        },
                        new
                        {
                            ProductId = 6,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://static.acer.com/up/Resource/Acer/Laptops/Swift_7/Photogallery/20190322/Acer-Swift-7-SF714-52T-Black-photogallery-02.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "Acer Swift 7",
                            ProductPrice = 1799.0
                        },
                        new
                        {
                            ProductId = 7,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/634af83ba7489df748a5b02f0ff0e2b0/L0KzQYm3VcE4N5xmfZH0aYP2gLBuTfxieKV0iJ9tZXzvPbLzifVvf5J3fZ86Nz31RH7rhfxtNZJxgdd3d3H1dX64V71zPF5oRadqZnS1QYS4VshjPWk6RqY7OUm5SIG3UcUzPmY4UKc9NUS1SIq1kP5o/kisspng-laptop-dell-alienware-17-r4-dell-alienware-17-r4-c-5afd213168b585.4299680015265385454289.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "Dell Alienware 17",
                            ProductPrice = 2999.0
                        },
                        new
                        {
                            ProductId = 8,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/f9413eeafb234fe2d5961891ddd3a7c7/L0KzQYm3UsAzN5h8fZH0aYP2gLBuTf1ia5N0h902cILyPb7ogBlvfJD4gJ92YXPlf7FyTfFqel5xeeJ9b4CwfbLqgv9wc151htk2cHnmPYboV8U0QJdmStQDMkC0PoeCUsMyOWc4Sac6N0a2QYi6WME4QGMziNDw/kisspng-macbook-pro-macintosh-macbook-air-laptop-macbook-png-pic-5a7538fa2b8201.6923116315176317381782.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "Macbook Air 13",
                            ProductPrice = 1299.0
                        },
                        new
                        {
                            ProductId = 9,
                            ProductDetailId = 1,
                            ProductImageUrl = "https://png2.cleanpng.com/sh/75c27a763e0e2eacc4233bf572d6d185/L0KzQYm3WcI4N6t2kJH0aYP2gLBuTfxmdpD7h599aHnxe8HohL11PGcyiJ87LXb6PYK7TflvfJZxRdV4cnWweYa0jB4ue5JxfZ8AYnHnQoa8VvIybJY3S5CAOEe2QIm3V8E2O2k1T6UENEK6Qom9TwBvbz==/kisspng-lenovo-thinkpad-t46-p-2-fw-14-intel-core-i5-on-sale-5bad2556b1de23.5873080715380739427286.png",
                            ProductInformation = "The world’s smallest 15.6-inch performance laptop with a stunning OLED display option. Now featuring 9th Gen Intel® Core™ processors.",
                            ProductName = "LENOVO Thinkpad X1",
                            ProductPrice = 1719.0
                        });
                });

            modelBuilder.Entity("ecommerce.Model.Cart", b =>
                {
                    b.HasOne("ecommerce.Model.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("ecommerce.Model.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecommerce.Model.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");
                });

            modelBuilder.Entity("ecommerce.Model.CustomerShippingAddresses", b =>
                {
                    b.HasOne("ecommerce.Model.Customer", "Customer")
                        .WithMany("CustomerShippingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Model.OrderDetails", b =>
                {
                    b.HasOne("ecommerce.Model.Orders", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrdersOrderId");
                });

            modelBuilder.Entity("ecommerce.Model.Orders", b =>
                {
                    b.HasOne("ecommerce.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.Model.Products", b =>
                {
                    b.HasOne("ecommerce.Model.OrderDetails", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderDetailsDetailId");

                    b.HasOne("ecommerce.Data.ProductDetails", "productDetails")
                        .WithMany()
                        .HasForeignKey("productDetailsProductDetailId");
                });
#pragma warning restore 612, 618
        }
    }
}
